
SAMV71_LIB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004e8  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000428  20400000  004004e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20400428  00400910  00020428  2**2
                  ALLOC
  3 .heap         00000204  20400444  0040092c  00020428  2**0
                  ALLOC
  4 .stack        00000400  20400648  00400b30  00020428  2**0
                  ALLOC
  5 .ARM.attributes 0000002a  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020452  2**0
                  CONTENTS, READONLY
  7 .debug_info   0000162e  00000000  00000000  000204ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000352  00000000  00000000  00021ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fa  00000000  00000000  00021e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000078  00000000  00000000  00021f25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00021f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00032c5f  00000000  00000000  00021fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000018c8  00000000  00000000  00054c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    001208d6  00000000  00000000  0005650c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000001b8  00000000  00000000  00176de4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 0a 40 20 b1 01 40 00 ad 01 40 00 ad 01 40 00     H.@ ..@...@...@.
  400010:	ad 01 40 00 ad 01 40 00 ad 01 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ad 01 40 00 ad 01 40 00 00 00 00 00 ad 01 40 00     ..@...@.......@.
  40003c:	35 02 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     5.@...@...@...@.
  40004c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40005c:	ad 01 40 00 ad 01 40 00 00 00 00 00 ad 01 40 00     ..@...@.......@.
  40006c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40007c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40008c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40009c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000ac:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000bc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000cc:	ad 01 40 00 00 00 00 00 ad 01 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000ec:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  4000fc:	ad 01 40 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ..@...@...@...@.
  40010c:	ad 01 40 00 ad 01 40 00 ad 01 40 00 00 00 00 00     ..@...@...@.....
  40011c:	00 00 00 00 ad 01 40 00 ad 01 40 00 ad 01 40 00     ......@...@...@.
  40012c:	ad 01 40 00 ad 01 40 00 00 00 00 00 ad 01 40 00     ..@...@.......@.
  40013c:	ad 01 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400428 	.word	0x20400428
  40015c:	00000000 	.word	0x00000000
  400160:	004004e8 	.word	0x004004e8

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004004e8 	.word	0x004004e8
  4001a0:	2040042c 	.word	0x2040042c
  4001a4:	004004e8 	.word	0x004004e8
  4001a8:	00000000 	.word	0x00000000

004001ac <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4001ac:	e7fe      	b.n	4001ac <Dummy_Handler>
	...

004001b0 <Reset_Handler>:
{
  4001b0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
  4001b2:	4b17      	ldr	r3, [pc, #92]	; (400210 <Reset_Handler+0x60>)
  4001b4:	4a17      	ldr	r2, [pc, #92]	; (400214 <Reset_Handler+0x64>)
  4001b6:	429a      	cmp	r2, r3
  4001b8:	d010      	beq.n	4001dc <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
  4001ba:	4b17      	ldr	r3, [pc, #92]	; (400218 <Reset_Handler+0x68>)
  4001bc:	4a14      	ldr	r2, [pc, #80]	; (400210 <Reset_Handler+0x60>)
  4001be:	429a      	cmp	r2, r3
  4001c0:	d20c      	bcs.n	4001dc <Reset_Handler+0x2c>
  4001c2:	3b01      	subs	r3, #1
  4001c4:	1a9b      	subs	r3, r3, r2
  4001c6:	f023 0303 	bic.w	r3, r3, #3
  4001ca:	3304      	adds	r3, #4
  4001cc:	4413      	add	r3, r2
  4001ce:	4911      	ldr	r1, [pc, #68]	; (400214 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
  4001d0:	f851 0b04 	ldr.w	r0, [r1], #4
  4001d4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4001d8:	429a      	cmp	r2, r3
  4001da:	d1f9      	bne.n	4001d0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
  4001dc:	4b0f      	ldr	r3, [pc, #60]	; (40021c <Reset_Handler+0x6c>)
  4001de:	4a10      	ldr	r2, [pc, #64]	; (400220 <Reset_Handler+0x70>)
  4001e0:	429a      	cmp	r2, r3
  4001e2:	d20a      	bcs.n	4001fa <Reset_Handler+0x4a>
  4001e4:	3b01      	subs	r3, #1
  4001e6:	1a9b      	subs	r3, r3, r2
  4001e8:	f023 0303 	bic.w	r3, r3, #3
  4001ec:	3304      	adds	r3, #4
  4001ee:	4413      	add	r3, r2
                *pDest++ = 0;
  4001f0:	2100      	movs	r1, #0
  4001f2:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4001f6:	4293      	cmp	r3, r2
  4001f8:	d1fb      	bne.n	4001f2 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  4001fa:	4a0a      	ldr	r2, [pc, #40]	; (400224 <Reset_Handler+0x74>)
  4001fc:	4b0a      	ldr	r3, [pc, #40]	; (400228 <Reset_Handler+0x78>)
  4001fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400202:	6093      	str	r3, [r2, #8]
        __libc_init_array();
  400204:	4b09      	ldr	r3, [pc, #36]	; (40022c <Reset_Handler+0x7c>)
  400206:	4798      	blx	r3
        main();
  400208:	4b09      	ldr	r3, [pc, #36]	; (400230 <Reset_Handler+0x80>)
  40020a:	4798      	blx	r3
  40020c:	e7fe      	b.n	40020c <Reset_Handler+0x5c>
  40020e:	bf00      	nop
  400210:	20400000 	.word	0x20400000
  400214:	004004e8 	.word	0x004004e8
  400218:	20400428 	.word	0x20400428
  40021c:	20400444 	.word	0x20400444
  400220:	20400428 	.word	0x20400428
  400224:	e000ed00 	.word	0xe000ed00
  400228:	00400000 	.word	0x00400000
  40022c:	00400379 	.word	0x00400379
  400230:	00400245 	.word	0x00400245

00400234 <SysTick_Handler>:
#include "System_Init.h"

void SysTick_Handler(void)
{
	//toggle the led at PC8
	PIOC->PIO_ODSR ^= PIO_ODSR_P9;
  400234:	4a02      	ldr	r2, [pc, #8]	; (400240 <SysTick_Handler+0xc>)
  400236:	6b93      	ldr	r3, [r2, #56]	; 0x38
  400238:	f483 7300 	eor.w	r3, r3, #512	; 0x200
  40023c:	6393      	str	r3, [r2, #56]	; 0x38
  40023e:	4770      	bx	lr
  400240:	400e1200 	.word	0x400e1200

00400244 <main>:
}

int main(void)
{
  400244:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    System_Init();
  400246:	4b0e      	ldr	r3, [pc, #56]	; (400280 <main+0x3c>)
  400248:	4798      	blx	r3
	//UART_init();
	
	//Systick configure
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk |	SysTick_CTRL_ENABLE_Msk;
  40024a:	4b0e      	ldr	r3, [pc, #56]	; (400284 <main+0x40>)
  40024c:	2207      	movs	r2, #7
  40024e:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0xFFFFFF;
  400250:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
  400254:	605a      	str	r2, [r3, #4]
	
	//configure the pin for output
	PIOC->PIO_OER |= PIO_OER_P9;
  400256:	4b0c      	ldr	r3, [pc, #48]	; (400288 <main+0x44>)
  400258:	691a      	ldr	r2, [r3, #16]
  40025a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40025e:	611a      	str	r2, [r3, #16]
	
	//enable PIOC control
	PIOC->PIO_PER |= PIO_PER_P9;
  400260:	681a      	ldr	r2, [r3, #0]
  400262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  400266:	601a      	str	r2, [r3, #0]
	
	//disable resister pull-up
	PIOC->PIO_PUDR |= PIO_PUDR_P9;
  400268:	6e1a      	ldr	r2, [r3, #96]	; 0x60
  40026a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  40026e:	661a      	str	r2, [r3, #96]	; 0x60
	
	//on page 350, in 32.5.5 Synchronous Data Output
	//if i want to read/write on PIO_ODSR, then PIO_OWER must be set
	//once it is done, the PIO_ODSR can use as a regular register
	//-> ignore checking the PIO_ODSR to set or clear regiester.
	PIOC->PIO_OWER |= PIO_OWER_P9;
  400270:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  400274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  400278:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	
	//set global interrupt
	__asm(" cpsie	i");
  40027c:	b662      	cpsie	i
  40027e:	e7fe      	b.n	40027e <main+0x3a>
  400280:	0040036d 	.word	0x0040036d
  400284:	e000e010 	.word	0xe000e010
  400288:	400e1200 	.word	0x400e1200

0040028c <PMC_Changing_clock>:

//page 294
//31.17
//Programing Sequence for changing clock PLL
void PMC_Changing_clock(void)
{
  40028c:	b410      	push	{r4}
	//prepare
	//prepare
	unsigned int temp;
	temp = PMC->CKGR_MOR;
  40028e:	4831      	ldr	r0, [pc, #196]	; (400354 <PMC_Changing_clock+0xc8>)
  400290:	6a03      	ldr	r3, [r0, #32]
	temp &=~ CKGR_MOR_MOSCRCF(0x7);
	EFC->EEFC_WPMR |= EEFC_WPMR_WPEN | EEFC_WPMR_WPKEY_PASSWD;
  400292:	4a31      	ldr	r2, [pc, #196]	; (400358 <PMC_Changing_clock+0xcc>)
  400294:	f8d2 40e4 	ldr.w	r4, [r2, #228]	; 0xe4
  400298:	4930      	ldr	r1, [pc, #192]	; (40035c <PMC_Changing_clock+0xd0>)
  40029a:	4321      	orrs	r1, r4
  40029c:	f8c2 10e4 	str.w	r1, [r2, #228]	; 0xe4
	EFC->EEFC_FMR |= EEFC_FMR_FWS(5);
  4002a0:	6811      	ldr	r1, [r2, #0]
  4002a2:	f441 61a0 	orr.w	r1, r1, #1280	; 0x500
  4002a6:	6011      	str	r1, [r2, #0]
	temp &=~ CKGR_MOR_MOSCRCF(0x7);
  4002a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | temp;
  4002ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4002b0:	6203      	str	r3, [r0, #32]
	while((PMC->PMC_SR & PMC_SR_MOSCRCS) != PMC_SR_MOSCRCS);
  4002b2:	4602      	mov	r2, r0
  4002b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002b6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  4002ba:	d0fb      	beq.n	4002b4 <PMC_Changing_clock+0x28>
	//step 1
	//do nothing
	//step 2
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST(0xFF);
  4002bc:	4a25      	ldr	r2, [pc, #148]	; (400354 <PMC_Changing_clock+0xc8>)
  4002be:	6a11      	ldr	r1, [r2, #32]
  4002c0:	4b27      	ldr	r3, [pc, #156]	; (400360 <PMC_Changing_clock+0xd4>)
  4002c2:	430b      	orrs	r3, r1
  4002c4:	6213      	str	r3, [r2, #32]
	while((PMC->PMC_SR & PMC_SR_MOSCXTS) != PMC_SR_MOSCXTS);
  4002c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002c8:	f013 0f01 	tst.w	r3, #1
  4002cc:	d0fb      	beq.n	4002c6 <PMC_Changing_clock+0x3a>
	//step 3
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4002ce:	4a21      	ldr	r2, [pc, #132]	; (400354 <PMC_Changing_clock+0xc8>)
  4002d0:	6a11      	ldr	r1, [r2, #32]
  4002d2:	4b24      	ldr	r3, [pc, #144]	; (400364 <PMC_Changing_clock+0xd8>)
  4002d4:	430b      	orrs	r3, r1
  4002d6:	6213      	str	r3, [r2, #32]
	//step 4
	while((PMC->PMC_SR & PMC_SR_MOSCSELS) != PMC_SR_MOSCSELS);
  4002d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4002de:	d0fb      	beq.n	4002d8 <PMC_Changing_clock+0x4c>
	//step 5
	while((PMC->CKGR_MCFR & CKGR_MCFR_MAINFRDY) != CKGR_MCFR_MAINFRDY);
  4002e0:	4a1c      	ldr	r2, [pc, #112]	; (400354 <PMC_Changing_clock+0xc8>)
  4002e2:	6a53      	ldr	r3, [r2, #36]	; 0x24
  4002e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4002e8:	d0fb      	beq.n	4002e2 <PMC_Changing_clock+0x56>
	if(PMC->CKGR_MCFR == '\0' )
  4002ea:	4b1a      	ldr	r3, [pc, #104]	; (400354 <PMC_Changing_clock+0xc8>)
  4002ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  4002ee:	b943      	cbnz	r3, 400302 <PMC_Changing_clock+0x76>
	{
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD |CKGR_MOR_MOSCSEL;
  4002f0:	4a18      	ldr	r2, [pc, #96]	; (400354 <PMC_Changing_clock+0xc8>)
  4002f2:	6a11      	ldr	r1, [r2, #32]
  4002f4:	4b1b      	ldr	r3, [pc, #108]	; (400364 <PMC_Changing_clock+0xd8>)
  4002f6:	430b      	orrs	r3, r1
  4002f8:	6213      	str	r3, [r2, #32]
		while((PMC->PMC_SR & PMC_SR_MOSCSELS) != PMC_SR_MOSCSELS);
  4002fa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4002fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400300:	d0fb      	beq.n	4002fa <PMC_Changing_clock+0x6e>
	}
	//step 6
	PMC->CKGR_PLLAR |= CKGR_PLLAR_DIVA(1) | CKGR_PLLAR_PLLACOUNT(0x3F) | CKGR_PLLAR_MULA(0x18) | CKGR_PLLAR_ONE;
  400302:	4b14      	ldr	r3, [pc, #80]	; (400354 <PMC_Changing_clock+0xc8>)
  400304:	6a99      	ldr	r1, [r3, #40]	; 0x28
  400306:	4a18      	ldr	r2, [pc, #96]	; (400368 <PMC_Changing_clock+0xdc>)
  400308:	430a      	orrs	r2, r1
  40030a:	629a      	str	r2, [r3, #40]	; 0x28
	//step 7
	PMC->PMC_MCKR |= PMC_MCKR_PRES_CLK_1;
  40030c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40030e:	631a      	str	r2, [r3, #48]	; 0x30
	while((PMC->PMC_SR & PMC_SR_MCKRDY) != PMC_SR_MCKRDY);
  400310:	461a      	mov	r2, r3
  400312:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400314:	f013 0f08 	tst.w	r3, #8
  400318:	d0fb      	beq.n	400312 <PMC_Changing_clock+0x86>
	PMC->PMC_MCKR |= PMC_MCKR_MDIV_PCK_DIV2;
  40031a:	4a0e      	ldr	r2, [pc, #56]	; (400354 <PMC_Changing_clock+0xc8>)
  40031c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40031e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  400322:	6313      	str	r3, [r2, #48]	; 0x30
	while((PMC->PMC_SR & PMC_SR_MCKRDY) != PMC_SR_MCKRDY);
  400324:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400326:	f013 0f08 	tst.w	r3, #8
  40032a:	d0fb      	beq.n	400324 <PMC_Changing_clock+0x98>
	PMC->PMC_MCKR &= ~PMC_MCKR_CSS(0x1);
  40032c:	4a09      	ldr	r2, [pc, #36]	; (400354 <PMC_Changing_clock+0xc8>)
  40032e:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400330:	f023 0301 	bic.w	r3, r3, #1
  400334:	6313      	str	r3, [r2, #48]	; 0x30
	while((PMC->PMC_SR & PMC_SR_MCKRDY) != PMC_SR_MCKRDY);
  400336:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400338:	f013 0f08 	tst.w	r3, #8
  40033c:	d0fb      	beq.n	400336 <PMC_Changing_clock+0xaa>
	PMC->PMC_MCKR |= PMC_MCKR_CSS(0x2);
  40033e:	4a05      	ldr	r2, [pc, #20]	; (400354 <PMC_Changing_clock+0xc8>)
  400340:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400342:	f043 0302 	orr.w	r3, r3, #2
  400346:	6313      	str	r3, [r2, #48]	; 0x30
	while((PMC->PMC_SR & PMC_SR_MCKRDY) != PMC_SR_MCKRDY);
  400348:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40034a:	f013 0f08 	tst.w	r3, #8
  40034e:	d0fb      	beq.n	400348 <PMC_Changing_clock+0xbc>
}
  400350:	bc10      	pop	{r4}
  400352:	4770      	bx	lr
  400354:	400e0600 	.word	0x400e0600
  400358:	400e0c00 	.word	0x400e0c00
  40035c:	45464301 	.word	0x45464301
  400360:	0037ff01 	.word	0x0037ff01
  400364:	01370000 	.word	0x01370000
  400368:	20183f01 	.word	0x20183f01

0040036c <System_Init>:

void System_Init(void)
{
  40036c:	b508      	push	{r3, lr}
	PMC_Changing_clock();
  40036e:	4b01      	ldr	r3, [pc, #4]	; (400374 <System_Init+0x8>)
  400370:	4798      	blx	r3
  400372:	bd08      	pop	{r3, pc}
  400374:	0040028d 	.word	0x0040028d

00400378 <__libc_init_array>:
  400378:	b570      	push	{r4, r5, r6, lr}
  40037a:	4e0f      	ldr	r6, [pc, #60]	; (4003b8 <__libc_init_array+0x40>)
  40037c:	4d0f      	ldr	r5, [pc, #60]	; (4003bc <__libc_init_array+0x44>)
  40037e:	1b76      	subs	r6, r6, r5
  400380:	10b6      	asrs	r6, r6, #2
  400382:	bf18      	it	ne
  400384:	2400      	movne	r4, #0
  400386:	d005      	beq.n	400394 <__libc_init_array+0x1c>
  400388:	3401      	adds	r4, #1
  40038a:	f855 3b04 	ldr.w	r3, [r5], #4
  40038e:	4798      	blx	r3
  400390:	42a6      	cmp	r6, r4
  400392:	d1f9      	bne.n	400388 <__libc_init_array+0x10>
  400394:	4e0a      	ldr	r6, [pc, #40]	; (4003c0 <__libc_init_array+0x48>)
  400396:	4d0b      	ldr	r5, [pc, #44]	; (4003c4 <__libc_init_array+0x4c>)
  400398:	1b76      	subs	r6, r6, r5
  40039a:	f000 f893 	bl	4004c4 <_init>
  40039e:	10b6      	asrs	r6, r6, #2
  4003a0:	bf18      	it	ne
  4003a2:	2400      	movne	r4, #0
  4003a4:	d006      	beq.n	4003b4 <__libc_init_array+0x3c>
  4003a6:	3401      	adds	r4, #1
  4003a8:	f855 3b04 	ldr.w	r3, [r5], #4
  4003ac:	4798      	blx	r3
  4003ae:	42a6      	cmp	r6, r4
  4003b0:	d1f9      	bne.n	4003a6 <__libc_init_array+0x2e>
  4003b2:	bd70      	pop	{r4, r5, r6, pc}
  4003b4:	bd70      	pop	{r4, r5, r6, pc}
  4003b6:	bf00      	nop
  4003b8:	004004d0 	.word	0x004004d0
  4003bc:	004004d0 	.word	0x004004d0
  4003c0:	004004d8 	.word	0x004004d8
  4003c4:	004004d0 	.word	0x004004d0

004003c8 <register_fini>:
  4003c8:	4b02      	ldr	r3, [pc, #8]	; (4003d4 <register_fini+0xc>)
  4003ca:	b113      	cbz	r3, 4003d2 <register_fini+0xa>
  4003cc:	4802      	ldr	r0, [pc, #8]	; (4003d8 <register_fini+0x10>)
  4003ce:	f000 b805 	b.w	4003dc <atexit>
  4003d2:	4770      	bx	lr
  4003d4:	00000000 	.word	0x00000000
  4003d8:	004003e9 	.word	0x004003e9

004003dc <atexit>:
  4003dc:	2300      	movs	r3, #0
  4003de:	4601      	mov	r1, r0
  4003e0:	461a      	mov	r2, r3
  4003e2:	4618      	mov	r0, r3
  4003e4:	f000 b81a 	b.w	40041c <__register_exitproc>

004003e8 <__libc_fini_array>:
  4003e8:	b538      	push	{r3, r4, r5, lr}
  4003ea:	4c0a      	ldr	r4, [pc, #40]	; (400414 <__libc_fini_array+0x2c>)
  4003ec:	4d0a      	ldr	r5, [pc, #40]	; (400418 <__libc_fini_array+0x30>)
  4003ee:	1b64      	subs	r4, r4, r5
  4003f0:	10a4      	asrs	r4, r4, #2
  4003f2:	d00a      	beq.n	40040a <__libc_fini_array+0x22>
  4003f4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  4003f8:	3b01      	subs	r3, #1
  4003fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  4003fe:	3c01      	subs	r4, #1
  400400:	f855 3904 	ldr.w	r3, [r5], #-4
  400404:	4798      	blx	r3
  400406:	2c00      	cmp	r4, #0
  400408:	d1f9      	bne.n	4003fe <__libc_fini_array+0x16>
  40040a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40040e:	f000 b863 	b.w	4004d8 <_fini>
  400412:	bf00      	nop
  400414:	004004e8 	.word	0x004004e8
  400418:	004004e4 	.word	0x004004e4

0040041c <__register_exitproc>:
  40041c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400420:	4c25      	ldr	r4, [pc, #148]	; (4004b8 <__register_exitproc+0x9c>)
  400422:	6825      	ldr	r5, [r4, #0]
  400424:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
  400428:	4606      	mov	r6, r0
  40042a:	4688      	mov	r8, r1
  40042c:	4692      	mov	sl, r2
  40042e:	4699      	mov	r9, r3
  400430:	b3c4      	cbz	r4, 4004a4 <__register_exitproc+0x88>
  400432:	6860      	ldr	r0, [r4, #4]
  400434:	281f      	cmp	r0, #31
  400436:	dc17      	bgt.n	400468 <__register_exitproc+0x4c>
  400438:	1c43      	adds	r3, r0, #1
  40043a:	b176      	cbz	r6, 40045a <__register_exitproc+0x3e>
  40043c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
  400440:	2201      	movs	r2, #1
  400442:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
  400446:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
  40044a:	4082      	lsls	r2, r0
  40044c:	4311      	orrs	r1, r2
  40044e:	2e02      	cmp	r6, #2
  400450:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
  400454:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
  400458:	d01e      	beq.n	400498 <__register_exitproc+0x7c>
  40045a:	3002      	adds	r0, #2
  40045c:	6063      	str	r3, [r4, #4]
  40045e:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
  400462:	2000      	movs	r0, #0
  400464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400468:	4b14      	ldr	r3, [pc, #80]	; (4004bc <__register_exitproc+0xa0>)
  40046a:	b303      	cbz	r3, 4004ae <__register_exitproc+0x92>
  40046c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  400470:	f3af 8000 	nop.w
  400474:	4604      	mov	r4, r0
  400476:	b1d0      	cbz	r0, 4004ae <__register_exitproc+0x92>
  400478:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
  40047c:	2700      	movs	r7, #0
  40047e:	e880 0088 	stmia.w	r0, {r3, r7}
  400482:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  400486:	4638      	mov	r0, r7
  400488:	2301      	movs	r3, #1
  40048a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
  40048e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
  400492:	2e00      	cmp	r6, #0
  400494:	d0e1      	beq.n	40045a <__register_exitproc+0x3e>
  400496:	e7d1      	b.n	40043c <__register_exitproc+0x20>
  400498:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
  40049c:	430a      	orrs	r2, r1
  40049e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
  4004a2:	e7da      	b.n	40045a <__register_exitproc+0x3e>
  4004a4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
  4004a8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
  4004ac:	e7c1      	b.n	400432 <__register_exitproc+0x16>
  4004ae:	f04f 30ff 	mov.w	r0, #4294967295
  4004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4004b6:	bf00      	nop
  4004b8:	004004c0 	.word	0x004004c0
  4004bc:	00000000 	.word	0x00000000

004004c0 <_global_impure_ptr>:
  4004c0:	20400000                                ..@ 

004004c4 <_init>:
  4004c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004c6:	bf00      	nop
  4004c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4004ca:	bc08      	pop	{r3}
  4004cc:	469e      	mov	lr, r3
  4004ce:	4770      	bx	lr

004004d0 <__init_array_start>:
  4004d0:	004003c9 	.word	0x004003c9

004004d4 <__frame_dummy_init_array_entry>:
  4004d4:	00400165                                e.@.

004004d8 <_fini>:
  4004d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4004da:	bf00      	nop
  4004dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4004de:	bc08      	pop	{r3}
  4004e0:	469e      	mov	lr, r3
  4004e2:	4770      	bx	lr

004004e4 <__fini_array_start>:
  4004e4:	00400141 	.word	0x00400141
